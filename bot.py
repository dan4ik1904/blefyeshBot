import logging
from aiogram import Bot, Dispatcher, types
from aiogram.utils import executor
from DB import DB

API_TOKEN = ''  
db = DB('db.db')
# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
bot = Bot(token=API_TOKEN)
dp = Dispatcher(bot)

@dp.message_handler(commands=['start', 'help'])
async def send_welcome(message: types.Message):

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–Ω–æ–ø–æ–∫
    buttons = [
        types.KeyboardButton("–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å"),
        types.KeyboardButton("–¢–æ–ø 5üèÜ"),
    ]
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    keyboard = types.ReplyKeyboardMarkup(resize_keyboard=True)
    keyboard.add(buttons[0])
    keyboard.add(buttons[1])


    user = db.get_user(message['from']['id'])
    if(user == None):
        db.add_user(name=message['from']['first_name'], tgName=message['from']['username'], tgId=message['from']['id'], count=0)
    await message.reply("–ü—Ä–∏–≤–µ—Ç! –Ø –±–ª–µ—Ñ—É–µ—à—å-–±–æ—Ç.\n–ù–∞–ø–∏—à–∏ –ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ", reply_markup=keyboard)

@dp.message_handler(lambda message: message.text == '–ú–æ–π –ø—Ä–æ—Ñ–∏–ª—å')
async def handle_button_click(message: types.Message):
    user = db.get_user(message['from']['id'])
    if(user == None):
        db.add_user(name=message['from']['first_name'], tgName=message['from']['username'], tgId=message['from']['id'], count=0)
        user = db.get_user(message['from']['id'])
    await message.answer(f"–ò–º—è:  {user[1]}  @{user[2]}\n–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –±–ª–µ—Ñ—É–µ—à—å: {user[3]}")

@dp.message_handler(lambda message: message.text == '–¢–æ–ø 5üèÜ')
async def handle_button_click(message: types.Message):
    users = db.get_top_five()
    response_message = "–¢–æ–ø 5 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:\n"
    for user in users:
        response_message += f"@{user[2]}: {user[3]}\n" 
    await message.answer(response_message)


@dp.message_handler()
async def echo(message: types.Message):
    db.addCount(message['from']['id'])
    await message.answer("–ë–ª–µ—Ñ—É–µ—à—å?ü§®")

if __name__ == '__main__':
    executor.start_polling(dp, skip_updates=True)
    
